opal_filter "regular_expressions" do
  fails "Regexp.compile given a Regexp sets the encoding to EUC-JP if the Regexp literal has the 'e' option"
  fails "Regexp.compile given a Regexp sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only"
  fails "Regexp.compile given a Regexp sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only"
  fails "Regexp.compile given a Regexp sets the encoding to Windows-31J if the Regexp literal has the 's' option"
  fails "Regexp.compile given a String does not set Regexp options if second argument is nil or false"
  fails "Regexp.compile given a String does not set Regexp options if second argument is nil or false"
  fails "Regexp.compile given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)"
  fails "Regexp.compile given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)"
  fails "Regexp.compile given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)"
  fails "Regexp.compile given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)"
  fails "Regexp.compile given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)"
  fails "Regexp.compile given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)"
  fails "Regexp.compile given a String treats any non-Fixnum, non-nil, non-false second argument as IGNORECASE"
  fails "Regexp.compile given a String treats any non-Fixnum, non-nil, non-false second argument as IGNORECASE"
  fails "Regexp.compile given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.compile given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.compile given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.compile given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if more than six hexadecimal digits are given"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if more than six hexadecimal digits are given"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if the \\u{} escape is empty"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if the \\u{} escape is empty"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if \\x is not followed by any hexadecimal digits"
  fails "Regexp.compile given a String with escaped characters raises a RegexpError if \\x is not followed by any hexadecimal digits"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.compile given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.compile works by default for subclasses with overridden #initialize"
  fails "Regexp#encoding defaults to US-ASCII if the Regexp contains only US-ASCII character"
  fails "Regexp#encoding defaults to UTF-8 if a literal UTF-8 character appears"
  fails "Regexp#encoding defaults to UTF-8 if \\u escapes appear"
  fails "Regexp#encoding ignores the default_internal encoding"
  fails "Regexp#encoding returns an Encoding object"
  fails "Regexp#encoding returns ASCII-8BIT if the 'n' modifier is supplied and non-US-ASCII characters are present"
  fails "Regexp#encoding returns US_ASCII if the 'n' modifier is supplied and only US-ASCII characters are present"
  fails "Regexp#encoding returns Windows-31J if the 's' modifier is supplied"
  fails "Regexp.escape sets the encoding of the result to ASCII-8BIT if any non-US-ASCII characters are present in an input String with invalid encoding"
  fails "Regexp.escape sets the encoding of the result to the encoding of the String if any non-US-ASCII characters are present in an input String with valid encoding"
  fails "Regexp.escape sets the encoding of the result to US-ASCII if there are only US-ASCII characters present in the input String"
  fails "Regexp#fixed_encoding? returns true if the Regexp contains a \\u escape"
  fails "Regexp#fixed_encoding? returns true if the Regexp contains a UTF-8 literal"
  fails "Regexp#hash is based on the text and options of Regexp"
  fails "Regexp#hash returns the same value for two Regexps differing only in the /n option"
  fails "Regexp#initialize raises a SecurityError on a Regexp literal"
  fails "Regexp#initialize raises a TypeError on an initialized non-literal Regexp"
  fails "Regexp.new given a Regexp sets the encoding to EUC-JP if the Regexp literal has the 'e' option"
  fails "Regexp.new given a Regexp sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only"
  fails "Regexp.new given a Regexp sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only"
  fails "Regexp.new given a Regexp sets the encoding to Windows-31J if the Regexp literal has the 's' option"
  fails "Regexp.new given a String does not set Regexp options if second argument is nil or false"
  fails "Regexp.new given a String does not set Regexp options if second argument is nil or false"
  fails "Regexp.new given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)"
  fails "Regexp.new given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)"
  fails "Regexp.new given a String treats any non-Fixnum, non-nil, non-false second argument as IGNORECASE"
  fails "Regexp.new given a String treats any non-Fixnum, non-nil, non-false second argument as IGNORECASE"
  fails "Regexp.new given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.new given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters"
  fails "Regexp.new given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.new given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if more than six hexadecimal digits are given"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if more than six hexadecimal digits are given"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if the \\u{} escape is empty"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if the \\u{} escape is empty"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if \\x is not followed by any hexadecimal digits"
  fails "Regexp.new given a String with escaped characters raises a RegexpError if \\x is not followed by any hexadecimal digits"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present"
  fails "Regexp.new works by default for subclasses with overridden #initialize"
  fails "Regexp.quote sets the encoding of the result to ASCII-8BIT if any non-US-ASCII characters are present in an input String with invalid encoding"
  fails "Regexp.quote sets the encoding of the result to the encoding of the String if any non-US-ASCII characters are present in an input String with valid encoding"
  fails "Regexp.quote sets the encoding of the result to US-ASCII if there are only US-ASCII characters present in the input String"
  fails "Regexp#source has UTF-8 encoding when created from a non-ASCII-only \\u{} literal"
  fails "Regexp#source has US-ASCII encoding when created from an ASCII-only \\u{} literal"
  fails "Regexp#to_s displays groups with options"
  fails "Regexp#to_s displays single group with same options as main regex as the main regex"
  fails "Regexp#to_s handles abusive option groups"
  fails "Regexp#to_s returns a string in (?xxx:yyy) notation"
  fails "Regexp.try_convert returns nil if given an argument that can't be converted to a Regexp"
  fails "Regexp.try_convert returns the argument if given a Regexp"
  fails "Regexp.try_convert tries to coerce the argument by calling #to_regexp"
  fails "Regexp.try_convert tries to coerce the argument by calling #to_regexp"
  fails "Regexp.union converts argument flags to group flags"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only Regexp"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only String"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only Regexp"
  fails "Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only String"
  fails "Regexp.union raises ArgumentError if the arguments include conflicting fixed encoding Regexps"
  fails "Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters"
  fails "Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters and another ASCII-only String"
  fails "Regexp.union returns a Regexp with the encoding of multiple non-conflicting Strings containing non-ASCII-compatible characters"
  fails "Regexp.union returns a Regexp with US-ASCII encoding if all arguments are ASCII-only"
  fails "Regexp.union returns a Regexp with UTF-8 if one part is UTF-8"
end
